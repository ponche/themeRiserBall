/******************************************************************
Site Name:
Author:

Stylesheet: Bootstrap Grid Stylesheet

Version: 4.1.0 

Resources:
	* https://getbootstrap.com/docs/4.1/layout/grid/
	* https://getbootstrap.com/docs/4.1/utilities/flex/

******************************************************************/

html {
	box-sizing: border-box;
	-ms-overflow-style: scrollbar;
}

*,
*::before,
*::after {
	box-sizing: inherit;
}

// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
	// Common properties for all breakpoints
	%grid-column {
		position: relative;
		width: 100%;
		min-height: 1px; // Prevent columns from collapsing when empty
		padding-right: ($gutter / 2);
		padding-left: ($gutter / 2);
	}

	@each $breakpoint in map-keys($breakpoints) {
		$infix: breakpoint-infix($breakpoint, $breakpoints);

		// Allow columns to stretch full width below their breakpoints
		@for $i from 1 through $columns {
			.col#{$infix}-#{$i} {
				@extend %grid-column;
			}
		}
		.col#{$infix},
		.col#{$infix}-auto {
			@extend %grid-column;
		}

		@include media-breakpoint-up($breakpoint, $breakpoints) {
			// Provide basic `.col-{bp}` classes for equal-width flexbox columns
			.col#{$infix} {
				@include flex-basis(0);
				@include flex-grow(1);
				max-width: 100%;
			}
			.col#{$infix}-auto {
				@include flex(0 0 auto);
				width: auto;
				max-width: none; // Reset earlier grid tiers
			}

			@for $i from 1 through $columns {
				.col#{$infix}-#{$i} {
					@include make-col($i, $columns);
				}
			}

			.order#{$infix}-first { 
				@include order(-1); 
			}

			.order#{$infix}-last { 
				@include order($columns + 1); 
			}

			@for $i from 0 through $columns {
				.order#{$infix}-#{$i} { 
					@include order($i); 
				}
			}

			// `$columns - 1` because offsetting by the width of an entire row isn't possible
			@for $i from 0 through ($columns - 1) {
				@if not ($infix == "" and $i == 0) { // Avoid emitting useless .offset-0
					.offset#{$infix}-#{$i} {
						@include make-col-offset($i, $columns);
					}
				}
			}
		}
	}
}

/// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin make-container() {
	width: 100%;
	padding-right: ($grid-gutter-width / 2);
	padding-left: ($grid-gutter-width / 2);
	margin-right: auto;
	margin-left: auto;
}


// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
	@each $breakpoint, $container-max-width in $max-widths {
		@include media-breakpoint-up($breakpoint, $breakpoints) {
			max-width: $container-max-width;
		}
	}
}

@mixin make-row() {
	@include flexbox(flex);
	@include flex-wrap(wrap);
	margin-right: ($grid-gutter-width / -2);
	margin-left: ($grid-gutter-width / -2);
}

@mixin make-col-ready() {
	position: relative;
	// Prevent columns from becoming too narrow when at smaller grid tiers by
	// always setting `width: 100%;`. This works because we use `flex` values
	// later on to override this initial width.
	width: 100%;
	min-height: 1px; // Prevent collapsing
	padding-right: ($grid-gutter-width / 2);
	padding-left: ($grid-gutter-width / 2);
}

@mixin make-col($size, $columns: $grid-columns) {
	@include flex(0 0 percentage($size / $columns));
	//flex: 0 0 percentage($size / $columns);
	// Add a `max-width` to ensure content within each column does not blow out
	// the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
	// do not appear to require this.
	max-width: percentage($size / $columns);
}

@mixin make-col-offset($size, $columns: $grid-columns) {
	$num: $size / $columns;
	margin-left: if($num == 0, 0, percentage($num));
}

// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

.container {
	@include make-container();
	@include make-container-max-widths();
}

// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but with 100% width for
// fluid, full width layouts.

.container-fluid {
	@include make-container();
}

// Row
//
// Rows contain and clear the floats of your columns.

.row {
	@include make-row();
}

// Remove the negative margin from default .row, then the horizontal padding
// from all immediate children columns (to prevent runaway style inheritance).
.no-gutters {
	margin-right: 0;
	margin-left: 0;

	> .col,
	> [class*="col-"] {
		padding-right: 0;
		padding-left: 0;
	}
}

.no-padding {
	padding-left: 0;
	padding-right: 0;
}

.no-margin {
	margin-left: 0;
	margin-right: 0;
}

// Columns
//
// Common styles for small and large grid columns

@include make-grid-columns();

// Flex variation
//
// Custom styles for additional flex alignment options.

@each $breakpoint in map-keys($grid-breakpoints) {
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);

		.flex#{$infix}-row 			  { @include flex-direction(row !important); }
		.flex#{$infix}-column         { @include flex-direction(column !important); }
		.flex#{$infix}-row-reverse    { @include flex-direction(row-reverse !important); }
		.flex#{$infix}-column-reverse { @include flex-direction(column-reverse !important); }

		.flex#{$infix}-wrap         { @include flex-wrap(wrap !important); }
		.flex#{$infix}-nowrap       { @include flex-wrap(nowrap !important); }
		.flex#{$infix}-wrap-reverse { @include flex-wrap(wrap-reverse !important); }
		.flex#{$infix}-fill         { @include flex(1 1 auto !important); }
		.flex#{$infix}-grow-0       { @include flex-grow(0 !important); }
    	.flex#{$infix}-grow-1       { @include flex-grow(1 !important); }
    	.flex#{$infix}-shrink-0     { @include flex-shrink(0 !important);}
    	.flex#{$infix}-shrink-1     { @include flex-shrink(1 !important); }

		.justify-content#{$infix}-start   { @include justify-content(flex-start !important); }
		.justify-content#{$infix}-end     { @include justify-content(flex-end !important); }
		.justify-content#{$infix}-center  { @include justify-content(center !important); }
		.justify-content#{$infix}-between { @include justify-content(space-between !important); }
		.justify-content#{$infix}-around  { @include justify-content(space-around !important); }

		.align-items#{$infix}-start    { @include align-items(flex-start !important); }
		.align-items#{$infix}-end      { @include align-items(flex-end !important); }
		.align-items#{$infix}-center   { @include align-items(center !important); }
		.align-items#{$infix}-baseline { @include align-items(baseline !important); }
		.align-items#{$infix}-stretch  { @include align-items(stretch !important); }

		.align-content#{$infix}-start   { @include align-content(flex-start !important); }
		.align-content#{$infix}-end     { @include align-content(flex-end !important); }
		.align-content#{$infix}-center  { @include align-content(center !important); }
		.align-content#{$infix}-between { @include align-content(space-between !important); }
		.align-content#{$infix}-around  { @include align-content(space-around !important); }
		.align-content#{$infix}-stretch { @include align-content(stretch !important); }

		.align-self#{$infix}-auto     { @include align-self(auto !important); }
		.align-self#{$infix}-start    { @include align-self(flex-start !important); }
		.align-self#{$infix}-end      { @include align-self(flex-end !important); }
		.align-self#{$infix}-center   { @include align-self(center !important); }
		.align-self#{$infix}-baseline { @include align-self(baseline !important); }
		.align-self#{$infix}-stretch  { @include align-self(stretch !important); }
	}
}

//
// Utilities for common `display` values
// https://stackoverflow.com/questions/35351353/missing-visible-and-hidden-in-bootstrap-v4
//

@each $breakpoint in map-keys($grid-breakpoints) {
	@include media-breakpoint-up($breakpoint) {
		$infix: breakpoint-infix($breakpoint, $grid-breakpoints);

		.d#{$infix}-none         { display: none !important; }
		.d#{$infix}-inline       { display: inline !important; }
		.d#{$infix}-inline-block { display: inline-block !important; }
		.d#{$infix}-block        { display: block !important; }
		.d#{$infix}-table        { display: table !important; }
		.d#{$infix}-table-row    { display: table-row !important; }
		.d#{$infix}-table-cell   { display: table-cell !important; }
		.d#{$infix}-flex         { @include flexbox(flex !important); }
		.d#{$infix}-inline-flex  { @include flexbox(inline-flex !important); }
	}
}

//
// Utilities for toggling `display` in print
//

@media print {
	.d-print-none         { display: none !important; }
	.d-print-inline       { display: inline !important; }
	.d-print-inline-block { display: inline-block !important; }
	.d-print-block        { display: block !important; }
	.d-print-table        { display: table !important; }
	.d-print-table-row    { display: table-row !important; }
	.d-print-table-cell   { display: table-cell !important; }
	.d-print-flex         { @include flexbox(flex !important); }
	.d-print-inline-flex  { @include flexbox(inline-flex !important); }
}
